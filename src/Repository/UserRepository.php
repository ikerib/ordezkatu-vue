<?php

/*
 *     Iker Ibarguren <@ikerib>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace App\Repository;

use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\DBAL\DBALException;

/**
 * UserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends ServiceEntityRepository
{
    /**
     * UserRepository constructor.
     *
     * @param \Doctrine\Common\Persistence\ManagerRegistry $registry
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, User::class);
    }

      /**
     * @param $username
     *
     * @return mixed
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getByUsername($username)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT u
                FROM App:User u
                WHERE u.username like :username
        ');
        $query->setParameter('username', $username);

        return $query->getOneOrNullResult();
    }

    /**
     * @param $role
     *
     * @return array
     */
    public function findByRole($role): array
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
           ->from($this->_entityName, 'u')
           ->where('u.roles LIKE :roles')
           ->setParameter('roles', '%"'.$role.'"%');

        return $qb->getQuery()->getResult();
    }

    /**
     * @return array|null
     *
     */
    public function findSailGuztiak(): ?array
    {
        $sql = /* @lang text */
            'SELECT DISTINCT(department) FROM `user` WHERE department IS NOT NULL ORDER BY department ASC ';
        $params = [];

        try {
            return $this->getEntityManager()->getConnection()->executeQuery($sql, $params)->fetchAll();
        } catch (DBALException $e) {
            throw new $e();
        }
    }

    /**
     * @return array|null
     *
     */
    public function findLanpostuGuztiak(): ?array
    {
        $sql = /* @lang text */
            'SELECT DISTINCT(lanpostua) FROM `user` WHERE lanpostua IS NOT NULL ORDER BY lanpostua';
        $params = [];

        try {
            return $this->getEntityManager()->getConnection()->executeQuery($sql, $params)->fetchAll();
        } catch (DBALException $e) {
            throw new $e();
        }
    }
}
